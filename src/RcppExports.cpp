// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// installation_kami_testing
void installation_kami_testing();
RcppExport SEXP _RcppKamiClusterTesting_installation_kami_testing() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    installation_kami_testing();
    return R_NilValue;
END_RCPP
}
// kami_testing
void kami_testing();
RcppExport SEXP _RcppKamiClusterTesting_kami_testing() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    kami_testing();
    return R_NilValue;
END_RCPP
}
// predict_FMSGWR_ESC_kami_testing
Rcpp::List predict_FMSGWR_ESC_kami_testing(Rcpp::List coeff_stationary_cov_to_pred, Rcpp::List coeff_events_cov_to_pred, Rcpp::NumericMatrix coordinates_events_to_pred, Rcpp::List coeff_stations_cov_to_pred, Rcpp::NumericMatrix coordinates_stations_to_pred, int units_to_be_predicted, Rcpp::NumericVector abscissa_ev, Rcpp::List model_fitted, int n_knots_smoothing_pred, int n_intervals_trapezoidal_quadrature, double target_error_trapezoidal_quadrature, int max_iterations_trapezoidal_quadrature, Rcpp::Nullable<int> num_threads);
RcppExport SEXP _RcppKamiClusterTesting_predict_FMSGWR_ESC_kami_testing(SEXP coeff_stationary_cov_to_predSEXP, SEXP coeff_events_cov_to_predSEXP, SEXP coordinates_events_to_predSEXP, SEXP coeff_stations_cov_to_predSEXP, SEXP coordinates_stations_to_predSEXP, SEXP units_to_be_predictedSEXP, SEXP abscissa_evSEXP, SEXP model_fittedSEXP, SEXP n_knots_smoothing_predSEXP, SEXP n_intervals_trapezoidal_quadratureSEXP, SEXP target_error_trapezoidal_quadratureSEXP, SEXP max_iterations_trapezoidal_quadratureSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type coeff_stationary_cov_to_pred(coeff_stationary_cov_to_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type coeff_events_cov_to_pred(coeff_events_cov_to_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type coordinates_events_to_pred(coordinates_events_to_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type coeff_stations_cov_to_pred(coeff_stations_cov_to_predSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type coordinates_stations_to_pred(coordinates_stations_to_predSEXP);
    Rcpp::traits::input_parameter< int >::type units_to_be_predicted(units_to_be_predictedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type abscissa_ev(abscissa_evSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type model_fitted(model_fittedSEXP);
    Rcpp::traits::input_parameter< int >::type n_knots_smoothing_pred(n_knots_smoothing_predSEXP);
    Rcpp::traits::input_parameter< int >::type n_intervals_trapezoidal_quadrature(n_intervals_trapezoidal_quadratureSEXP);
    Rcpp::traits::input_parameter< double >::type target_error_trapezoidal_quadrature(target_error_trapezoidal_quadratureSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations_trapezoidal_quadrature(max_iterations_trapezoidal_quadratureSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type num_threads(num_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_FMSGWR_ESC_kami_testing(coeff_stationary_cov_to_pred, coeff_events_cov_to_pred, coordinates_events_to_pred, coeff_stations_cov_to_pred, coordinates_stations_to_pred, units_to_be_predicted, abscissa_ev, model_fitted, n_knots_smoothing_pred, n_intervals_trapezoidal_quadrature, target_error_trapezoidal_quadrature, max_iterations_trapezoidal_quadrature, num_threads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppKamiClusterTesting_installation_kami_testing", (DL_FUNC) &_RcppKamiClusterTesting_installation_kami_testing, 0},
    {"_RcppKamiClusterTesting_kami_testing", (DL_FUNC) &_RcppKamiClusterTesting_kami_testing, 0},
    {"_RcppKamiClusterTesting_predict_FMSGWR_ESC_kami_testing", (DL_FUNC) &_RcppKamiClusterTesting_predict_FMSGWR_ESC_kami_testing, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppKamiClusterTesting(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
